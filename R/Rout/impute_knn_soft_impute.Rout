
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pckgs <- c("Amelia", "mice", "mi", "softImpute", "impute", "Hmisc",
+            "data.table", "parallel", "ggplot2", "simsalapar")
> loaded.pckgs <- lapply(pckgs, function(x) do.call(library, args=list(x)))
Loading required package: Rcpp
## 
## Amelia II: Multiple Imputation
## (Version 1.7.4, built: 2015-12-05)
## Copyright (C) 2005-2015 James Honaker, Gary King and Matthew Blackwell
## Refer to http://gking.harvard.edu/amelia/ for more information
## 
mice 2.25 2015-11-09
Loading required package: Matrix
Loading required package: stats4
mi (Version 1.0, packaged: 2015-04-16 14:03:10 UTC; goodrich)
mi  Copyright (C) 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015 Trustees of Columbia University
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under the General Public License version 2 or later.
Execute RShowDoc('COPYING') for details.

Attaching package: ‘mi’

The following objects are masked from ‘package:mice’:

    complete, pool

Loaded softImpute 1.4


Attaching package: ‘softImpute’

The following object is masked from ‘package:mi’:

    complete

The following object is masked from ‘package:mice’:

    complete

Loading required package: grid
Loading required package: lattice
Loading required package: survival
Loading required package: Formula
Loading required package: ggplot2

Attaching package: ‘Hmisc’

The following object is masked from ‘package:softImpute’:

    impute

The following objects are masked from ‘package:base’:

    format.pval, round.POSIXt, trunc.POSIXt, units

> 
> 
> source('completion_fns.R')
> source("varlist_fns.R") # create the variable list for the simulation
> options(mc.cores=1)
> 
> set.seed(1)
> FLAS <- readRDS('../data/FLAS_clean.rds')
> FLAS_COMPLETE <- readRDS('../data/FLAS_complete_average.rds')
> 
> column.type.mi <- list(grade_complete="ordered-categorical")
> ## MCAR simulation data
> data.complete <- FLAS_COMPLETE[, -12] # Avoid problem of convergence with mi
> mt <- na.pattern(FLAS[, -12])
> 
> ## Follow simsalapar
> 
> # imputation.methods <- c("softImpute", "impute.knn")
> imputation.methods <- c("impute.knn", "softImpute")
> varList <- varListProd(data.complete, mt, imputation.methods)
> 
> ## Have to redefine the impuationSimulation function the varList can only take
> ## grids
> doOne <- function(data.complete, missing.mechanism, imputation.method, p, n.imputation,
+                   imputation.args, missing.args, missing.random.seed){
+ 
+   ## Stopping mechanism from MARFrequency
+   ## Should make this with a predicate funciton on the argument
+   if (missing.mechanism == 'MARFrequency' & p > 0.3){
+     measures <- colnames(data.complete)
+     res <- rep(-1, length(measures))
+     names(res) <- measures
+     return(res)
+   }
+ 
+   miss.args <-
+     c(list(random.seed=missing.random.seed), missing.args[[missing.mechanism]])
+ 
+   ## arguments for the imputeDataFns
+   n.imputation.args <-
+     ifelse(!missing.mechanism %in% c('softImpute', 'impute.knn'),
+            list(n=n.imputation),
+            list())
+ 
+   if (is.null(imputation.args[[imputation.method]])) {
+     imp.args <- n.imputation.args
+   } else {
+     imp.args <- c(n.imputation.args, imputation.args[[imputation.method]])
+   }
+ 
+   imputationSimulation(as.data.frame(data.complete), missing.mechanism, imputation.method,
+                        p, miss.args, imp.args)
+ }
> 
> ## sfile="imputation_lapply.rds"
> ## res <- doLapply(varList, doOne=doOne, monitor=interactive())
> cl <- makeCluster(4, type="PSOCK")
> clusterExport(cl, "pckgs")
> clusterEvalQ(cl, {
+   source('completion_fns.R')
+   loaded.pckgs <- lapply(pckgs, function(x) do.call(library, args=list(x)))
+   0
+ })
[[1]]
[1] 0

[[2]]
[1] 0

[[3]]
[1] 0

[[4]]
[1] 0

> 
> sfile.path <- paste0("../simulation_rds/imputation_", "20151221_1800_",
+                      paste0(imputation.methods, collapse='_'), ".rds")
> res <- doClusterApply(varList, cl, sfile=sfile.path, doOne=doOne)
> 
> proc.time()
   user  system elapsed 
 49.852   4.372 316.046 
